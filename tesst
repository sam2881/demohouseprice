import json

# Function to generate rules based on JSON Schema without prefix
def generate_rule_from_schema(property_name, property_schema, rule_id):
    rule = {
        "rule_id": str(rule_id),
        "display_rule": property_schema.get("description", "Validation rule")
    }
    
    # Determine the SQL rule based on type, pattern, format, and other constraints
    if "enum" in property_schema:
        # Enumeration values
        allowed_values = "', '".join(property_schema["enum"])
        rule["sql_rule"] = f"CASE WHEN {property_name} IN ('{allowed_values}') THEN 0 ELSE 1 END"
        rule["display_rule"] += f" Allowed values: {', '.join(property_schema['enum'])}"
    
    elif property_schema.get("type") == "string":
        if "pattern" in property_schema:
            rule["sql_rule"] = f"CASE WHEN rlike({property_name}, '{property_schema['pattern']}') THEN 0 ELSE 1 END"
            rule["display_rule"] += f" Pattern: {property_schema['pattern']}"
        elif property_schema.get("format") == "date":
            rule["sql_rule"] = f"CASE WHEN rlike({property_name}, '\\d{{4}}-\\d{{2}}-\\d{{2}}') THEN 0 ELSE 1 END"
            rule["display_rule"] += " Must be in YYYY-MM-DD format"
        elif property_schema.get("format") == "email":
            rule["sql_rule"] = f"CASE WHEN rlike({property_name}, '[\\w\\.]+@[\\w\\.]+') THEN 0 ELSE 1 END"
            rule["display_rule"] += " Must be a valid email format"
        else:
            rule["sql_rule"] = f"CASE WHEN {property_name} IS NOT NULL THEN 0 ELSE 1 END"
            rule["display_rule"] += " Cannot be null"
    
    elif property_schema.get("type") == "number":
        rule["sql_rule"] = f"CASE WHEN {property_name} IS NOT NULL AND {property_name}::numeric IS NOT NULL THEN 0 ELSE 1 END"
        rule["display_rule"] += " Must be a valid number"
    
    elif property_schema.get("type") == "boolean":
        rule["sql_rule"] = f"CASE WHEN {property_name} IS TRUE OR {property_name} IS FALSE THEN 0 ELSE 1 END"
        rule["display_rule"] += " Must be a boolean value"
    
    else:
        rule["sql_rule"] = f"CASE WHEN {property_name} IS NOT NULL THEN 0 ELSE 1 END"
        rule["display_rule"] += " Cannot be null"
    
    return rule

# Recursive function to parse the schema and generate rules
def parse_schema_and_generate_rules(schema, rules):
    properties = schema.get("properties", {})
    required_fields = schema.get("required", [])
    
    for property_name, property_schema in properties.items():
        rule_id = len(rules) + 1
        
        if property_schema.get("type") == "object":
            # Recursively parse nested objects without prefixing parent names
            parse_schema_and_generate_rules(property_schema, rules)
        else:
            # Generate rule for non-object properties using only the direct column name
            rule = generate_rule_from_schema(property_name, property_schema, rule_id)
            if property_name in required_fields:
                rule["display_rule"] += " (Required)"
            rules.append(rule)

# Main function to load schema, process rules, and save output
def process_schema_file(input_schema_filepath, output_filepath):
    # Load JSON Schema from file
    with open(input_schema_filepath, "r") as file:
        schema = json.load(file)

    # Initialize an empty list for generated rules
    rules = []
    
    # Parse the schema and generate rules without prefixing
    parse_schema_and_generate_rules(schema, rules)

    # Structure the output as required
    expectation_suite = {
        "expectation_suite_name": "schema_based_expectation_suite",
        "expectations": rules
    }

    # Save the generated rules to the output JSON file
    with open(output_filepath, "w") as file:
        json.dump(expectation_suite, file, indent=4)
    
    print(f"Rules generated and saved to '{output_filepath}'")

# File paths
input_schema_filepath = "schema.json"  # Path to the JSON Schema file
output_filepath = "generated_rules_from_schema.json"  # Path to the output JSON file

# Run the processing function
process_schema_file(input_schema_filepath, output_filepath)
