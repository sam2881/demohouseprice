import json
import re

# Function to dynamically parse nested JSON data or schema and generate rules
def parse_and_generate_rules(data, rules, prefix=""):
    for key, value in data.items():
        # Create a dynamic field name path for nested fields (e.g., "parent.child.field")
        full_key = f"{prefix}.{key}" if prefix else key
        
        # If the value is a dictionary, recursively parse it
        if isinstance(value, dict):
            parse_and_generate_rules(value, rules, full_key)
        else:
            # Generate a rule based on the full_key (field name)
            rule_id = len(rules) + 1
            rule = generate_rule(full_key, rule_id)
            rules.append(rule)

# Function to create a rule based on dynamic patterns found in the column name
def generate_rule(column_name, rule_id):
    rule = {
        "rule_id": str(rule_id),
        "display_rule": "Auto-generated validation rule"
    }
    
    # Apply dynamic SQL rule based on patterns in the column name
    if re.search(r"code", column_name, re.IGNORECASE):
        rule["sql_rule"] = f"CASE WHEN rlike({column_name}, '[0-9]+') OR {column_name} IS NULL THEN 0 ELSE 1 END"
        rule["display_rule"] = "Must be numeric, NULL allowed."
    
    elif re.search(r"id", column_name, re.IGNORECASE):
        rule["sql_rule"] = f"CASE WHEN {column_name} IS NOT NULL THEN 0 ELSE 1 END"
        rule["display_rule"] = "Must be non-null."
    
    elif re.search(r"address", column_name, re.IGNORECASE):
        rule["sql_rule"] = f"CASE WHEN rlike({column_name}, '[A-Za-z0-9 ]+') OR {column_name} IS NULL THEN 0 ELSE 1 END"
        rule["display_rule"] = "Must be alphanumeric, NULL allowed."
    
    elif re.search(r"date", column_name, re.IGNORECASE):
        rule["sql_rule"] = f"CASE WHEN rlike({column_name}, '\\d{{4}}-\\d{{2}}-\\d{{2}}') OR {column_name} IS NULL THEN 0 ELSE 1 END"
        rule["display_rule"] = "Must be in YYYY-MM-DD format, NULL allowed."
    
    elif re.search(r"email", column_name, re.IGNORECASE):
        rule["sql_rule"] = f"CASE WHEN rlike({column_name}, '[\\w\\.]+@[\\w\\.]+') THEN 0 ELSE 1 END"
        rule["display_rule"] = "Must be a valid email format."
    
    else:
        # Default rule for any fields that do not match specific patterns
        rule["sql_rule"] = f"CASE WHEN {column_name} IS NOT NULL THEN 0 ELSE 1 END"
        rule["display_rule"] = "Must be non-null."

    return rule

# Main function to load input, process rules, and save output
def process_json_file(input_filepath, output_filepath):
    # Load JSON input from file (it could be a JSON data message or JSON schema)
    with open(input_filepath, "r") as file:
        input_data = json.load(file)

    # Initialize an empty list to store the generated rules
    rules = []
    
    # Recursively parse the JSON structure and generate rules
    parse_and_generate_rules(input_data, rules)

    # Structure the output as required
    expectation_suite = {
        "expectation_suite_name": "dynamic_expectation_suite",
        "expectations": rules
    }

    # Save the generated rules to the output JSON file
    with open(output_filepath, "w") as file:
        json.dump(expectation_suite, file, indent=4)
    
    print(f"Rules generated and saved to '{output_filepath}'")

# File paths for input JSON and output JSON
input_filepath = "input.json"  # Path to the JSON data message or JSON schema file
output_filepath = "generated_rules.json"  # Path to the output rules JSON file

# Run the processing function
process_json_file(input_filepath, output_filepath)
