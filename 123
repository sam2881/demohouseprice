def apply_explode(df, schema, base_path=""):
    for field in schema.fields:
        current_path = f"{base_path}.{field.name}" if base_path else field.name
        if isinstance(field.dataType, ArrayType):
            # Explode only if the array's elementType is a StructType or another ArrayType
            if isinstance(field.dataType.elementType, (StructType, ArrayType)):
                exploded_col_name = camel_to_snake(current_path.split('.')[-1]) + "_exploded"
                df = df.withColumn(exploded_col_name, explode_outer(col(current_path)))
                # Recursively apply explosion to the elements of this array if it is a StructType
                if isinstance(field.dataType.elementType, StructType):
                    df = apply_explode(df, field.dataType.elementType, exploded_col_name)
        elif isinstance(field.dataType, StructType):
            df = apply_explode(df, field.dataType, current_path)
    return df
def generate_select_expr(schema, base_path=""):
    select_expr = []
    for field in schema.fields:
        current_path = f"{base_path}.{field.name}" if base_path else field.name
        if isinstance(field.dataType, StructType) or isinstance(field.dataType, ArrayType):
            # Recursively handle nested structs or arrays
            select_expr.extend(generate_select_expr(field.dataType, current_path))
        else:
            # Only add leaf nodes to select expressions
            snake_case_name = camel_to_snake(current_path.split('.')[-1])
            select_expr.append(col(current_path).alias(snake_case_name))
    return select_expr
