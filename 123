def generate_select_for_simple_nested_json(df):
    select_expressions = []

    def recurse_fields(fields, parent_path=""):
        for field in fields:
            current_path = f"{parent_path}.{field.name}" if parent_path else field.name
            if isinstance(field.dataType, StructType):
                recurse_fields(field.dataType.fields, current_path)
            elif not isinstance(field.dataType, ArrayType):
                alias = current_path.replace('.', '_')
                select_expressions.append(f"col('{current_path}').alias('{alias}')")

    recurse_fields(df.schema.fields)
    return ",\n    ".join(select_expressions)

# Example usage:
select_clause = generate_select_for_simple_nested_json(df)
print(f"df.select(\n    {select_clause}\n).show(truncate=False)")

def generate_explode_and_select(df):
    exploded_info = []
    select_expressions = []

    def recurse_explode(fields, parent_path=""):
        for field in fields:
            current_path = f"{parent_path}.{field.name}" if parent_path else field.name
            if isinstance(field.dataType, ArrayType):
                exploded_name = current_path.replace('.', '_') + "_exploded"
                df = df.withColumn(exploded_name, explode_outer(col(current_path)))
                exploded_info.append(exploded_name)
                if isinstance(field.dataType.elementType, StructType):
                    recurse_explode(field.dataType.elementType.fields, exploded_name)
            elif isinstance(field.dataType, StructType):
                recurse_explode(field.dataType.fields, current_path)
            else:
                alias = current_path.replace('.', '_')
                select_expressions.append(f"col('{current_path}').alias('{alias}')")

    recurse_explode(df.schema.fields)
    return df, ",\n    ".join(select_expressions)

# Example usage:
df, select_clause = generate_explode_and_select(df)
print(f"df.select(\n    {select_clause}\n).show(truncate=False)")
