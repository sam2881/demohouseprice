def generate_simple_select(df):
    select_expressions = []
    for field in df.schema.fields:
        if not isinstance(field.dataType, (ArrayType, StructType)):
            path = field.name
            select_expressions.append(f"col('{path}').alias('{path.replace('.', '_')}')")
    return ",\n    ".join(select_expressions)
from pyspark.sql.functions import explode_outer

def generate_complex_select(df, path_prefix=''):
    select_expressions = []
    for field in df.schema.fields:
        full_path = f"{path_prefix}{field.name}" if path_prefix else field.name
        
        if isinstance(field.dataType, StructType):
            # Recursively handle StructType
            sub_expressions = generate_complex_select(df.select(f"{full_path}.*"), full_path + '_')
            select_expressions.append(sub_expressions)
        elif isinstance(field.dataType, ArrayType):
            # Handle ArrayType by exploding the array
            exploded_column = f"{full_path}_exploded"
            df = df.withColumn(exploded_column, explode_outer(col(full_path)))
            if isinstance(field.dataType.elementType, StructType):
                # Recursively handle elements if they are StructTypes
                sub_expressions = generate_complex_select(df.select(f"{exploded_column}.*"), exploded_column + '_')
                select_expressions.append(sub_expressions)
            else:
                select_expressions.append(f"col('{exploded_column}').alias('{exploded_column}')")
        else:
            select_expressions.append(f"col('{full_path}').alias('{full_path.replace('.', '_')}')")

    return ",\n    ".join(select_expressions)

# Example usage:
# Assuming `df` is your DataFrame loaded with complex nested JSON.
simple_select = generate_simple_select(df)
complex_select = generate_complex_select(df)

# Print select statements for verification
print(f"Simple Select:\n{simple_select}\n")
print(f"Complex Select:\n{complex_select}\n")


select_statement = f"df.select(\n    {complex_select}\n).show(truncate=False)"
print(select_statement)
