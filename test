import pandas as pd
import json
import re
import logging
from typing import Union, Dict, Optional

logging.basicConfig(level=logging.INFO)

def generate_rule(column_name: str, data_type: str, rule_id: int, custom_patterns: Optional[Dict[str, str]] = None) -> Dict[str, Union[str, int]]:
    """
    Generates a validation rule based on the specified data type.
    
    Args:
        column_name: The name of the column in the database table.
        data_type: The expected data type for the column.
        rule_id: A unique identifier for the rule.
        custom_patterns: A dictionary of custom regular expressions for specific data types.
    
    Returns:
        A dictionary containing the generated validation rule.
    """
    custom_patterns = custom_patterns or {}  # Default to empty dict if None
    rule = {
        "rule_id": str(rule_id),
        "display_rule": f"Must be of type {data_type}"
    }
    
    # Define regex patterns for different data types
    type_patterns = {
        "int": r"^\d+$",
        "float": r"^\d+(\.\d+)?$",
        "number": r"^-?\d+(\.\d+)?$",  # Positive and negative numbers
        "varchar": r"^[\w\s\-,.]+$",  # Alphanumeric with punctuation
        "string": r"^[\w\s\-,.]+$",   # Same as varchar
        "date": r"^(19|20)\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$",  # YYYY-MM-DD
        "timestamp(6)": r"^(19|20)\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])\s([01]\d|2[0-3]):([0-5]\d):([0-5]\d)(\.\d{1,6})?$",  # YYYY-MM-DD HH:MM:SS.mmmmmm
        "email": r"^[\w\.-]+@[\w\.-]+\.\w+$",
        "boolean": r"^(true|false|1|0)$",  # Accepts 'true', 'false', '1', '0'
        "uuid": r"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"  # UUID pattern
    }
    
    # Use custom pattern if available, otherwise default pattern
    pattern = custom_patterns.get(data_type.lower(), type_patterns.get(data_type.lower()))
    
    if pattern:
        sql_rule = f"CASE WHEN rlike({column_name}, '{pattern}') OR {column_name} IS NULL THEN 0 ELSE 1 END"
    else:
        sql_rule = f"CASE WHEN {column_name} IS NOT NULL THEN 0 ELSE 1 END"
        rule["display_rule"] = "Must be non-null."
    
    rule["sql_rule"] = sql_rule
    logging.debug(f"Generated rule for column '{column_name}': {rule}")
    return rule

def process_excel_file(input_filepath: str, output_filepath: str, custom_patterns: Optional[Dict[str, str]] = None) -> None:
    """
    Loads Excel data, generates rules based on specified data types, and saves them to a file.
    
    Args:
        input_filepath: Path to the input Excel file.
        output_filepath: Path to the output JSON file for rules.
        custom_patterns: A dictionary of custom regular expressions for specific data types.
    """
    custom_patterns = custom_patterns or {}  # Default to empty dict if None
    
    try:
        df = pd.read_excel(input_filepath)
    except FileNotFoundError:
        logging.error(f"Input file '{input_filepath}' not found.")
        return
    except Exception as e:
        logging.error(f"Error reading Excel file: {e}")
        return
    
    if "column_name" not in df.columns or "data_type" not in df.columns:
        logging.error("Excel file must contain 'column_name' and 'data_type' columns.")
        return
    
    rules = []
    for index, row in df.iterrows():
        column_name = row["column_name"]
        data_type = row["data_type"]
        rule_id = index + 1
        rule = generate_rule(column_name, data_type, rule_id, custom_patterns)
        rules.append(rule)
    
    expectation_suite = {
        "expectation_suite_name": "excel_based_expectation_suite",
        "expectations": rules
    }
    
    with open(output_filepath, "w") as file:
        json.dump(expectation_suite, file, indent=4)
    
    logging.info(f"Rules generated and saved to '{output_filepath}'")

# Example usage with custom patterns
custom_patterns = {
    "phone_number": r"^\d{10}$",  # Example custom pattern for phone numbers
    "zip_code": r"^\d{5}(-\d{4})?$"  # Custom pattern for US ZIP codes (5 digits or ZIP+4)
}

input_filepath = "data_types.xlsx"  # Path to your input Excel file
output_filepath = "generated_rules_from_excel.json"  # Path to the output rules JSON file
process_excel_file(input_filepath, output_filepath, custom_patterns)
